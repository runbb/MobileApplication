"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var moment = require("moment");
var observable_property_decorator_1 = require("../../shared/observable-property-decorator");
var config_1 = require("../../config");
var TopicViewModel = /** @class */ (function (_super) {
    __extends(TopicViewModel, _super);
    function TopicViewModel(TopicPage, topicId, topicTitle) {
        var _this = _super.call(this) || this;
        _this.TopicPage = TopicPage;
        _this.topicId = topicId;
        _this.topicTitle = topicTitle;
        _this.title = "";
        _this.topicInfo = new observable_1.Observable();
        _this.topicReplies = [];
        _this.title = topicTitle;
        fetch(config_1.config.url + "t/topic/" + topicId + ".json").then(function (res) { return res.json(); })
            .then(function (res) {
            var topicView = TopicPage.getViewById("topicView");
            topicView.src = "<style>a {\n                    background: #00ff9508;\n                    display: block;\n                    margin: 5px;\n                    color: #0080d0;\n                    padding: 7px;\n                    border-radius: 5px;\n                    border: 3px solid #ffffffad;\n                    font-weight: bold;\n                    text-decoration: none;\n                    text-align: center;\n                }\n                * {\n                    direction: rtl;\n                    font-size: 100%;\n                }\n                img {\n                    width: 100%;\n                    min-width: 100%;\n                    max-width: 100%;\n                    height: auto;\n                }\n                code,pre {\n                    word-wrap: break-word;\n                    direction: ltr !important;\n                    text-align: left !important;\n                }\n                pre code {\n                    display: block;\n                    padding: 5px 10px;\n                    color: #222;\n                    background: #f9f9f9;\n                    max-height: 500px;\n                }\n                img.emoji {\n                    width: 1em;\n                    min-width: 1em;\n                    max-width: 1em;\n                    margin-left: 2px;\n                    margin-right: 2px;\n                }\n                article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {\n                    display: block;\n                }\n                aside.onebox {\n                    border: 5px solid #e9e9e9;\n                    padding: 12px 12px 12px 25px;\n                    font-size: 1em;\n                }\n                aside.onebox .onebox-body {\n                    clear: both;\n                }\n                aside.onebox .onebox-body [style*=\"--aspect-ratio\"] {\n                    position: relative;\n                }\n                .badge-notification.clicks {\n                    font-weight: normal;\n                    background-color: #e9e9e9;\n                    top: -1px;\n                    color: #919191;\n                    position: relative;\n                    margin-right: 2px;\n                    border: none;\n                }\n                aside.onebox .onebox-body h3, aside.onebox .onebox-body h4 {\n                    font-size: 1.17em;\n                    margin: 0 0 10px 0;\n                }</style>".trim()
                + res.post_stream.posts[0].cooked;
            res.post_stream.posts = res.post_stream.posts.map(function (post) {
                post.created_at = moment(post.created_at).locale("ar").fromNow();
                if (post.avatar_template) {
                    if (post.avatar_template.indexOf('http') == -1) {
                        post.avatar_template = (config_1.config.url + "." + post.avatar_template.replace("{size}", "80")).replace('./', '');
                    }
                }
                return post;
            });
            var replies = res.post_stream.posts;
            replies.shift();
            _this.topicInfo = res.post_stream.posts[0];
            _this.topicReplies = replies;
        });
        return _this;
    }
    __decorate([
        observable_property_decorator_1.ObservableProperty(),
        __metadata("design:type", String)
    ], TopicViewModel.prototype, "title", void 0);
    __decorate([
        observable_property_decorator_1.ObservableProperty(),
        __metadata("design:type", observable_1.Observable)
    ], TopicViewModel.prototype, "topicInfo", void 0);
    __decorate([
        observable_property_decorator_1.ObservableProperty(),
        __metadata("design:type", Object)
    ], TopicViewModel.prototype, "topicReplies", void 0);
    return TopicViewModel;
}(observable_1.Observable));
exports.TopicViewModel = TopicViewModel;
//# sourceMappingURL=data:application/json;base64,